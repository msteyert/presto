import os
from src.core.sequence_utils import GUIDE_LENGTH, CUT_TO_PAM_LENGTH


def writeCsvFile(outputFile, values):
    f = open(outputFile, "w")
    print("CSV file will be written to:", os.getcwd() + "/" + outputFile)

    lines = []

    def writeLine(*columns):
        strings = [str(i) for i in columns]
        lines.append(f"{','.join(strings)}")

    def finalize():
        f.write(os.linesep.join(lines))
        f.close()

    writeLine("INPUT")

    # Reiterate inputs
    writeLine("Wildtype sequence", values["wildtypeSequence"])
    writeLine("Mutation", values["insertion"])
    writeLine(
        "Spacer sequence",
        values["spacer"],
        "Spacer matches on",
        values["spacerMatchesOn"],
    )
    writeLine()

    writeLine("OUTPUT")

    # Spacer info
    writeLine("Spacer information")
    writeLine(
        "Autogenerated" if True else "User-defined"
    )  # TODO Say whether user-defined or autogenerated
    writeLine("Matches on", values["spacerMatchesOn"], "strand")

    # RT table
    writeLine("Reverse transcriptase templates")
    hasError = False
    for o in values["reverseTranscriptaseTemplates"]:
        if o["error"] != "":
            hasError = True
            break
    writeLine(
        "Selection",
        "RT sequence",
        "Flap homology region length",
        "Flap homology region G/C content",
        "Default",
        "Error" if hasError else "",
    )
    for o in values["reverseTranscriptaseTemplates"]:
        if o["startsWithC"] == False:
            writeLine(
                "------>" if True else "",  # TODO Add "------>" only if is selection
                o["rt"],
                str(o["fhrLength"]),
                str(o["fhrGC"]),
                ("<------" if o["isDefault"] else ""),
                o["error"],
            )
    writeLine()

    # PBS table
    writeLine("Primer binding sites")
    hasError = False
    for o in values["reverseTranscriptaseTemplates"]:
        if o["error"] != "":
            hasError = True
            break
    writeLine(
        "Selection",
        "PBS Sequence",
        "Length",
        "G/C content",
        "Tm",
        "Default",
        "Error" if hasError else "",
    )
    for o in values["primerBindingSites"]:
        writeLine(
            "------>" if True else "",  # TODO Add "------>" only if is selection
            o["pbs"],
            str(o["length"]),
            str(o["pbsGC"]),
            str(o["pbsTM"]),
            ("<------" if o["isDefault"] else ""),
            o["error"],
        )
    writeLine()

    # Print pe3 and pe3b guides
    writeLine("PE3 and PE3b guides")
    writeLine(
        "Guide sequence",
        "Cut index",
        "Distance between spacer and PE3 guide cut sites",
        "Type",
    )
    for o in values["primeEditing3Guides"]:
        if o["pamStart"] >= GUIDE_LENGTH + CUT_TO_PAM_LENGTH:
            writeLine(o["secondGuide"], o["cutPE3"], o["cutDiff"], o["type"])
    writeLine()

    # Print finalized sequences from step 4
    writeLine("Finalized sequences")
    writeLine("Edited DNA sequence", values["editedSequence"])
    writeLine("...")  # TODO Add final sequences, list cloning strategy etc.

    # Print general warnings
    if len(values["warnings"]["general"]) > 0:
        writeLine()
        writeLine("General warnings:")
        for warning in values["warnings"]["general"]:
            writeLine("", warning)

    # Print pe3 warnings
    if len(values["warnings"]["pe3"]) > 0:
        writeLine()
        writeLine("PE3/b warnings:")
        for warning in values["warnings"]["pe3"]:
            writeLine("", warning)

    # Print peg warnings
    if len(values["warnings"]["pegRna"]) > 0:
        writeLine()
        writeLine("pegRNA warnings:")
        for warning in values["warnings"]["pegRna"]:
            writeLine("", warning)

    finalize()
